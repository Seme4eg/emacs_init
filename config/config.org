* Use-package
Automatically install certain packages, as well as the ease of lazily loading them
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package) ;; if not..
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (require 'use-package-ensure)
  (setq use-package-always-ensure t) ;; instead of putting ':ensure' everywhere
#+END_SRC
* Packages update
*slows down the startup A LOT*
#+BEGIN_SRC emacs-lisp
  ;; (use-package auto-package-update
  ;;   :config
  ;;   (setq auto-package-update-delete-old-versions t)
  ;;   (setq auto-package-update-hide-results t)
  ;;   (auto-package-update-maybe))
#+END_SRC

* Evil
** evil itself
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init (evil-mode t)
    :bind ("M-c" . evil-normal-state) ;; just some fallback in situations like committing in magit
    :config
    ;; brings cursor at the middle of the screen after pressing 'n' in evil-mode
    (defadvice evil-ex-search-next (after advice-for-evil-ex-search-next activate)
      (evil-scroll-line-to-center (line-number-at-pos))))
#+END_SRC
** evil-leader
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :init
    (global-evil-leader-mode)
    (evil-leader/set-leader ",")
    :config
    (setq evil-leader/in-all-states 1
          ;; Change cursor color depending on mode (only GUI emacs)
          evil-emacs-state-cursor '("cyan" box)
          evil-normal-state-cursor '("cyan" box)
          evil-visual-state-cursor '("orange" box)
          evil-insert-state-cursor '("green" bar)
          evil-replace-state-cursor '("red" bar)
          evil-operator-state-cursor '("cyan" hollow)))
#+END_SRC

** evil Multiple-Cursors | [[https://github.com/gabesoft/evil-mc][github]]
#+BEGIN_SRC emacs-lisp
  (use-package evil-mc :diminish
    :init
    (global-evil-mc-mode 1)
    (evil-define-key 'visual evil-mc-key-map
      "A" #'evil-mc-make-cursor-in-visual-selection-end
      "I" #'evil-mc-make-cursor-in-visual-selection-beg))

  (evil-leader/set-key
    "ma" 'evil-mc-make-all-cursors
    "mz" 'evil-mc-undo-all-cursors
    "mn" 'evil-mc-make-and-goto-next-match
    "mp" 'evil-mc-make-and-goto-prev-match
    "mf" 'evil-mc-skip-and-goto-next-match
    "mb" 'evil-mc-skip-and-goto-prev-match
    "mu" 'evil-mc-undo-last-added-cursor)
#+END_SRC

* Environment
** Identation
I have learned to distrust tabs in my source code, so letâ€™s make sure
that we only have spaces. See this [[http://ergoemacs.org/emacs/emacs_tabs_space_indentation_setup.html][discussion]] for details.
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq tab-width 2)

  ;; make return key also do indent, globally (test)
  (electric-indent-mode 1)

  ;; Make tab key do indent first then completion.
  (setq-default tab-always-indent 'complete)
#+END_SRC

** Major settings
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 110) ;; must be default value to work
  (setq x-select-enable-clipboard t ;; paste - look for shortcut
        make-backup-files nil ;; disable backup files
        create-lockfiles nil
        auto-save-default nil ;; disable auto-save files
        disabled-command-function nil ;; no need to re-enable each feature bit-by-bit:
        ;; Misc
        echo-keystrokes 0.1 ;; Turn down the time to echo keystrokes
        visible-bell t ;; Get rid of the beeps
        use-dialog-box nil ;; use the echo area instead of dialog boxes
        visible-bell t) ;; Use a visual indicator instead of making horrible noises

  (defalias 'yes-or-no-p 'y-or-n-p) ;; Yes and No prompt

  ;; Vendor directory (for manually installed packages)
  (defvar sads/vendor-dir (expand-file-name "vendor" user-emacs-directory))
  (add-to-list 'load-path sads/vendor-dir)

  (dolist (project (directory-files sads/vendor-dir t "\\w+"))
  (when (file-directory-p project)
      (add-to-list 'load-path project)))
#+END_SRC

** Init file support
#+BEGIN_SRC emacs-lisp
  (require 'cl-lib) ;; new library for common-lib compatability (cl - old)

  (use-package dash
    :config (eval-after-load "dash" '(dash-enable-font-lock)))

  (use-package s)
  (use-package f)
#+END_SRC
** Hooks
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace) ;; always strip trailing whitespace

  ;; === linum and fringe ===
  (add-hook 'prog-mode-hook 'linum-mode)
  (add-hook 'prog-mode-hook 'hs-minor-mode)
  ;; (global-linum-mode 1)
  ;; (add-hook 'prog-mode-hook 'fringe-mode '(8 . 0)) ;; doesn't work, or jus didn't get the point
  (add-hook 'linum-mode-hook (lambda () (set-face-attribute 'linum nil :height 110))) ;; dunno what it does

  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer) ;; dunno if i need it
  (add-hook 'markdown-mode-hook 'auto-fill-mode)

  ;; Various keywords (in comments) are now flagged in a Red Error font
  (add-hook 'prog-common-hook
            (lambda ()
              (font-lock-add-keywords nil
                                      '(("\\<\\(FIX\\|FIXME\\|TODO\\|BUG\\|HACK\\):" 1 font-lock-warning-face t)))))
#+END_SRC
** Modes
#+BEGIN_SRC emacs-lisp
  ;; marking text
  (delete-selection-mode t)
  (transient-mark-mode t)

  (desktop-save-mode 1) ;; automatically save/restore sessions

  (global-prettify-symbols-mode t) ;; type 'lambda' to understand

  (save-place-mode 1) ;; save cursor position when u quit file
  (setq save-place-forget-unreadable-files t) ;; set to nil if something will work slow

  (global-subword-mode 1) ;; move in camelCase

  (global-auto-revert-mode nil)

  ;; shell-script-mode
  (add-to-list 'auto-mode-alist '("\\.zsh$" . shell-script-mode))

  ;; conf-mode
  (add-to-list 'auto-mode-alist '("\\.gitconfig$" . conf-mode))
  (add-to-list 'auto-mode-alist '("\\.gitignore$" . conf-mode))
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-;") 'comment-or-uncomment-region)
  (global-set-key (kbd "C-<tab>") 'dabbrev-expand)
  (define-key minibuffer-local-map (kbd "C-<tab>") 'dabbrev-expand)
  (global-set-key (kbd "<mouse-2>") 'clipboard-yank) ;; paste from clipboard by middle mouse button
#+END_SRC

** Navigation
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "w" 'save-buffer
    "bd" 'kill-buffer
    "bm" 'ibuffer
    "bo" 'switch-to-buffer)

  (global-set-key (kbd "C-c p") 'mode-line-other-buffer)
#+END_SRC

** Not used / unknown purpose
   #+BEGIN_SRC emacs-lisp
     ;; (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
     ;; (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

     ;; Allow confusing functions
     (put 'narrow-to-region 'disabled nil)
   #+END_SRC


* Appearance
** Packages
*** Spacemacs-theme
#+BEGIN_SRC emacs-lisp
  ;; (use-package spacemacs-common
  ;;     :ensure spacemacs-theme
  ;;     :config (load-theme 'spacemacs-dark t))
#+END_SRC

*** Doom-theme | [[https://github.com/hlissner/emacs-doom-themes][github]]
requires ~all-the-icons~ fonts to be installed: ~M-x all-the-icons-install-fonts~

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    (use-package all-the-icons)
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC
*** Rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode :diminish
    :hook prog-mode
    :config
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode)))
#+END_SRC

*** Spaceline / Powerline
#+BEGIN_SRC emacs-lisp
  ;; (use-package powerline
  ;;   :init (powerline-default-theme))

  (use-package spaceline
    :config
    (use-package diminish
      :init
      (diminish 'undo-tree-mode)
      (diminish 'subword-mode))
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC

** Display settings
#+BEGIN_SRC emacs-lisp
  ;; Splash Screen
  (setq inhibit-splash-screen t
        initial-scratch-message nil
        initial-major-mode 'org-mode)

  ;; Scroll-, tool-, menu bars*
  (menu-bar-mode -1)
  (when (window-system)
    (tool-bar-mode 0) ;; Toolbars were only cool with XEmacs
    (when (fboundp 'horizontal-scroll-bar-mode)
      (horizontal-scroll-bar-mode -1))
    (scroll-bar-mode -1)) ;; Scrollbars are waste screen estate

  ;; (if window-system (toggle-scroll-bar -1))
#+END_SRC

** Other visual settings
#+BEGIN_SRC emacs-lisp
  (setq-default indicate-empty-lines t)
  (when (not indicate-empty-lines)
  (toggle-indicate-empty-lines))

  (show-paren-mode t) ;; highlight parentheses
#+END_SRC
** Not used / known
   #+BEGIN_SRC emacs-lisp
     ;; when in GUI - highlight the line with the cursor
     ;; didn't enable cuz of the comment line highlighting in emacs theme
     ;; (when window-system (global-hl-line-mode t))

     ;; Color Codes
     (require 'ansi-color)
     (defun colorize-compilation-buffer ()
       (toggle-read-only)
       (ansi-color-apply-on-region (point-min) (point-max))
       (toggle-read-only))
   #+END_SRC


* Build-in pkgs
** Dired
#+BEGIN_SRC emacs-lisp
  (setq dired-dwim-target t)
  (put 'dired-find-alternate-file 'disabled nil)

  (use-package find-dired
     :init (setq find-ls-option '("-print0 | xargs -0 ls -od" . "-od")))
  ;; (setq find-ls-option '("-print0 | xargs -0 ls -ld" . "-ld")) -- ld / od??

  (use-package peep-dired
    :defer t ; don't access `dired-mode-map' until `peep-dired' is loaded
    :bind (:map dired-mode-map
                ("P" . peep-dired)))

  ;; ---

  (require 'dired-x)
  ;; (setq dired-omit-files "^\\.?#\\|^\\.[^.].*")
  ;; (add-hook 'dired-mode-hook (lambda ()
  ;;                              (dired-omit-mode t)))

  (defun air-dired-buffer-dir-or-home ()
    "Open dired to the current buffer's dir, or $HOME."
    (interactive)
    (let ((cwd (or (file-name-directory (or (buffer-file-name) ""))
                   (expand-file-name "~"))))
      (dired cwd)))

  (eval-after-load 'wdired
    (add-hook 'wdired-mode-hook 'evil-normal-state))
#+END_SRC

** Eshell | [[https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org][reference]]
*Eshell kbds:*
~M-RET~ - can be used to accumulate further commands while a command is
currently running. Since all input is passed to the subprocess being
executed, there is no automatic input queueing as there is with other
shells.
~C-c C-t~ - truncate the buffer if it grows too large.
~C-c C-r~ - move point to the beginning of the output of the last
command. With a prefix argument, it will narrow to view only that
output.
~C-c C-o~ - delete the output from the last command.
~C-c C-f~ - move forward a complete shell argument.
~C-c C-b~ - move backward a complete shell argument.

*** initial setup
#+BEGIN_SRC emacs-lisp
  (setenv "PATH" (concat "/usr/local/bin:/opt/local/bin:/usr/bin:/bin" (getenv "PATH")))
  (setenv "PAGER" "cat") ;; don't let any programs pause output through $PAGER

  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the current buffer's file."
    (interactive)
    (let* ((parent (file-name-directory (buffer-file-name)))
           (name   (car
                    (last
                     (split-string parent "/" t)))))
      (split-window-vertically)
      (other-window 1)
      (eshell "new")
      (rename-buffer (concat "*eshell: " name "*"))

      (insert (concat "ls"))
      (eshell-send-input)))

  (global-set-key (kbd "C-!") 'eshell-here)

  (defun delete-single-window (&optional window)
    "Remove WINDOW from the display.  Default is `selected-window'.
  If WINDOW is the only one in its frame, then `delete-frame' too."
    (interactive)
    (save-current-buffer
      (setq window (or window (selected-window)))
      (select-window window)
      (kill-buffer)
      (if (one-window-p t)
          (delete-frame)
          (delete-window (selected-window)))))

  (defun eshell/x (&rest args)
    (delete-single-window))


  (setq eshell-scroll-to-bottom-on-input 'all ;; any key pressed will jump back to prompt
        ;; eshell-buffer-shorthand t ...  Can't see Bug#19391
        eshell-error-if-no-glob t
        eshell-hist-ignoredups t
        eshell-save-history-on-exit t
        ;; 'find' and 'chmod' behave differently from Emacs than their Unix counterparts:
        eshell-prefer-lisp-functions nil ;; prefer the native implementations
        eshell-destroy-buffer-when-process-dies t)

  ;; aliases
  (add-hook 'eshell-mode-hook (lambda ()
      (eshell/alias "ff" "find-file $1")
      (eshell/alias "fow" "find-file-other-window $1")

      (eshell/alias "gd" "magit-diff-unstaged")
      (eshell/alias "gds" "magit-diff-staged")
      (eshell/alias "d" "dired $1")))

  (defun eshell/clear ()
    "Clear the eshell buffer."
    (let ((inhibit-read-only t))
      (erase-buffer)
      (eshell-send-input)))
#+END_SRC

*** special prompt
#+BEGIN_SRC emacs-lisp
  (defun curr-dir-git-branch-string (pwd)
    "Returns current git branch as a string, or the empty string if
  PWD is not in a git repo (or the git command is not found)."
    (interactive)
    (when (and (not (file-remote-p pwd))
               (eshell-search-path "git")
               (locate-dominating-file pwd ".git"))
      (let* ((git-url (shell-command-to-string "git config --get remote.origin.url"))
             (git-repo (file-name-base (s-trim git-url)))
             (git-output (shell-command-to-string (concat "git rev-parse --abbrev-ref HEAD")))
             (git-branch (s-trim git-output))
             (git-icon  "\xe0a0")
             (git-icon2 (propertize "\xf020" 'face `(:family "octicons"))))
        (concat git-repo " " git-icon2 " " git-branch))))

  (defun pwd-replace-home (pwd)
    "Replace home in PWD with tilde (~) character."
    (interactive)
    (let* ((home (expand-file-name (getenv "HOME")))
           (home-len (length home)))
      (if (and
           (>= (length pwd) home-len)
           (equal home (substring pwd 0 home-len)))
          (concat "~" (substring pwd home-len))
        pwd)))

  (defun pwd-shorten-dirs (pwd)
    "Shorten all directory names in PWD except the last two."
    (let ((p-lst (split-string pwd "/")))
      (if (> (length p-lst) 2)
          (concat
           (mapconcat (lambda (elm) (if (zerop (length elm)) ""
                                 (substring elm 0 1)))
                      (butlast p-lst 2)
                      "/")
           "/"
           (mapconcat (lambda (elm) elm)
                      (last p-lst 2)
                      "/"))
        pwd)))  ;; Otherwise, we just return the PWD

  ;; break up the directory into a 'parent' and a 'base'
  (defun split-directory-prompt (directory)
    (if (string-match-p ".*/.*" directory)
        (list (file-name-directory directory) (file-name-base directory))
      (list "" directory)))


  ;; tie it all together
  (defun eshell/eshell-local-prompt-function ()
    "A prompt for eshell that works locally (in that is assumes
  that it could run certain commands) in order to make a prettier,
  more-helpful local prompt."
    (interactive)
    (let* ((pwd        (eshell/pwd))
           (directory (split-directory-prompt
                       (pwd-shorten-dirs
                        (pwd-replace-home pwd))))
           (parent (car directory))
           (name   (cadr directory))
           (branch (curr-dir-git-branch-string pwd))

           (dark-env (eq 'dark (frame-parameter nil 'background-mode)))
           (for-bars                 `(:weight normal))
           (for-parent  (if dark-env `(:foreground "#5555ff") `(:foreground "blue")))
           (for-dir     (if dark-env `(:foreground "#7288da" :weight bold)
                          `(:foreground "blue" :weight bold)))
           (for-git                  `(:foreground "#c687d6")))

      (concat
       (propertize ""   'face for-bars)
       (propertize parent   'face for-parent)
       (propertize name     'face for-dir)
       (when branch
         (concat (propertize " :: "    'face for-bars)
                 (propertize branch   'face for-git)))
       (propertize "\n"     'face for-bars)
       (propertize (if (= (user-uid) 0) " #" " $") 'face `(:weight ultra-bold))
       (propertize " "    'face `(:weight bold)))))

  (setq-default eshell-prompt-function #'eshell/eshell-local-prompt-function)

  ;; Turn off the default prompt, otherwise, it won't use ours:
  (setq eshell-highlight-prompt nil)
#+END_SRC

*** Better command line history
On [[https://www.reddit.com/r/emacs/comments/1zkj2d/advanced_usage_of_eshell/][this discussion]] a little gem for using IDO to search back through the history, instead of M-R to display
the history in a selectable buffer.

Also, while M-p cycles through the history, M-P actually moves up the history in the buffer (easier than C-c p
and C-c n?):

Since eshellâ€™s history often gets confused with blank lines in the output, we can fix that with a better
replacement functions pegged to the eshell-prompt-regexp string:

#+BEGIN_SRC emacs-lisp
  (defun eshell-next-prompt (n)
    "Move to end of Nth next prompt in the buffer. See `eshell-prompt-regexp'."
    (interactive "p")
    (re-search-forward eshell-prompt-regexp nil t n)
    (when eshell-highlight-prompt
      (while (not (get-text-property (line-beginning-position) 'read-only) )
        (re-search-forward eshell-prompt-regexp nil t n)))
    (eshell-skip-prompt))

  (defun eshell-previous-prompt (n)
    "Move to end of Nth previous prompt in the buffer. See `eshell-prompt-regexp'."
    (interactive "p")
    (backward-char)
    (eshell-next-prompt (- n)))

  (defun eshell-insert-history ()
    "Displays the eshell history to select and insert back into your eshell."
    (interactive)
    (insert (ido-completing-read "Eshell history: "
                                 (delete-dups
                                  (ring-elements eshell-history-ring)))))

  (add-hook 'eshell-mode-hook (lambda ()
      (define-key eshell-mode-map (kbd "M-S-P") 'eshell-previous-prompt)
      (define-key eshell-mode-map (kbd "M-S-N") 'eshell-next-prompt)
      (define-key eshell-mode-map (kbd "M-r") 'eshell-insert-history)))
#+END_SRC

* ORG
[[https://github.com/howardabrams/dot-files/blob/master/emacs-org.org#journaling][continue..]]
** main settings
#+BEGIN_SRC emacs-lisp
  (use-package org
    :diminish abbrev-mode
    :init
    (setq org-log-done t ;; enable logging when tasks are complete
          org-list-description-max-indent 5
          ;; open code edit buffers in the same window
          org-src-window-setup 'current-window
          org-adapt-indentation nil ;; prevent demoting heading also shifting text inside sections
          org-src-fontify-natively t ;; Pretty code blocks

          org-use-speed-commands t
          org-return-follows-link t
          org-hide-emphasis-markers t
          org-outline-path-complete-in-steps nil
          org-src-tab-acts-natively t

          org-confirm-babel-evaluate nil
          org-todo-keywords '((sequence "TODO" "INPROGRESS" "DONE"))
          org-todo-keyword-faces '(("INPROGRESS" . (:foreground "blue" :weight bold))))

    :hook ((org-mode . org-indent-mode)
           (org-mode . abbrev-mode)
           ;; (org-mode . flyspell-mode) ;; (add-hook 'org-mode-hook (lambda () (flyspell-mode)))
           (org-mode . auto-fill-mode))

    :config
    (use-package org-bullets
      :hook (org-mode . org-bullets-mode))

    ;; handling errors
    :catch (lambda (keyword err)
             (message (error-message-string err))))

  ;; there is also *org-agenda* and *org-habit* setup in this tut, but i skipped it for now
#+END_SRC

** org-babel
embedd languages inside .org files with proper font-locking
Allows to extract and execute code.
#+BEGIN_SRC emacs-lisp
  ;; (require 'ob) ;; don't know if that's needed, seems not

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((js . t)
     ;; commented line below cuz dunno how to maintain both for now (FIX)
     ;; (shell . t) ;; 'sh' on ubuntu, 'shell' on windows
     (C . t)))
#+END_SRC

** agenda/todo setup
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (quote ("~/.emacs.d/org/todo.org"))) ;; dunno if it's gonna work

  ;; keybindings
  (evil-leader/set-key
    "oc" 'org-capture
    "oa" 'org-agenda)

  ;;set priority range from A to C with default A
  (setq org-highest-priority ?A)
  (setq org-lowest-priority ?C)
  (setq org-default-priority ?A)

  ;;set colours for priorities
  (setq org-priority-faces '((?A . (:foreground "#F0DFAF" :weight bold))
                             (?B . (:foreground "LightSteelBlue"))
                             (?C . (:foreground "OliveDrab"))))

  ;;open agenda in current window
  (setq org-agenda-window-setup (quote current-window))

  (setq org-capture-templates
        '(("t" "todo" entry (file+headline "~/.emacs.d/org/todo.org" "Tasks")
           "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n")))

  ;; org-mode agenda options

  (setq org-deadline-warning-days 7) ;; warn of any deadlines in next 7 days
  (setq org-agenda-span (quote fortnight)) ;;show tasks scheduled in next fortnight
  (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
  (setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
  ;;don't show tasks that are scheduled or have deadlines in the normal todo list
  (setq org-agenda-todo-ignore-deadlines (quote all))
  (setq org-agenda-todo-ignore-scheduled (quote all))

  ;;sort tasks in order of when they are due and then by priority
  (setq org-agenda-sorting-strategy
    (quote
     ((agenda deadline-up priority-down)
      (todo priority-down category-keep)
      (tags priority-down category-keep)
      (search category-keep))))
#+END_SRC

** snippets
now after typing '<el TAB' u will get code block with 'emacs-lisp' src
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

* Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init
    ;; use a custom css file to make it a little prettier
    ;; (setq markdown-css-paths `(expand-file-name "markdown.css" sads/vendor-dir))

    ;; generate HTML previews from within the mode
    ;; (setq markdown-command "pandoc --smart -f markdown -t html"))
    (setq markdown-command "markdown"))
#+END_SRC

* IVY | [[https://oremacs.com/swiper/][manual]]
  [[https://www.masteringemacs.org/article/introduction-to-ido-mode][ido]] | helm | ivy -- 3 different ways
** IVY enable
[[https://github.com/abo-abo/swiper#counsel][counsel setup]]
M-o (ivy-dispatching-done) presents available actions for selection, calls it after selection, and then exits.
C-M-o (ivy-dispatching-call) presents available actions for selection, calls it after selection, and then does not exit.
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :diminish counsel-mode
    :diminish ivy-mode
    :bind
    ("C-s" . swiper) ;; 'M-r' - toggle fuzzy search in swiper
    :init
    (counsel-mode)
    (ivy-mode)
    :config
    (use-package flx)
    (evil-leader/set-key "x" 'counsel-M-x)
    (setq ivy-use-virtual-buffers t
          ;; (setq ivy-count-format "(%d/%d) ")
          ivy-count-format ""
          ivy-initial-inputs-alist nil
          ivy-re-builders-alist '((t . ivy--regex-fuzzy))))
#+END_SRC

** Smex
*Package to get completion in ~M-x~ menu (and most used commands will be at top)*
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :init (smex-initialize)
    :bind ("M-X" . smex-major-mode-commands))

  ;; (setq smex-save-file (expand-file-name ".smex-items" user-emacs-directory))
#+END_SRC

* Projectile | [[https://docs.projectile.mx/en/latest/usage/][usage]]
[[https://github.com/howardabrams/dot-files/blob/master/emacs.org#block-wrappers][source]] of setup below
[[https://docs.projectile.mx/en/latest/configuration/#switching-projects][switching projects actions]] - useful

*Ignoring files* ([[https://docs.projectile.mx/en/latest/projects/#ignoring-files][link]]):
Create ~.projectile~ file and put there rules like in gitignore, but with prefix '-'

counsel-projectile *new* commands:
- ~{prefix} SPC~ (counsel-projectile) - jump to a project buffer or file,
  or switch project
- ~{prefix} s i~ (counsel-projectile-git-grep) - search project with git
  grep
- ~{prefix} O c~ (counsel-projectile-org-capture) - capture into project

> use ~M-o~ in any 'ivy' buffer to get options

([[https://github.com/ericdanan/counsel-projectile#the-counsel-projectile-switch-project-command][counsel-projectile-switch-project]]) ???

#+BEGIN_SRC emacs-lisp
  (use-package projectile :diminish projectile-mode
    :init
    ; (projectile-mode 1)
    (define-key evil-normal-state-map (kbd ",p") 'projectile-command-map)
    (use-package counsel-projectile
      :init (counsel-projectile-mode))
    :config
    (setq projectile-project-search-path '("~/git")
          projectile-completion-system 'ivy))
#+END_SRC

* Company
[[https://github.com/company-mode/company-mode/issues/68#issuecomment-36208504][company vs auto-complete]]

#+BEGIN_SRC emacs-lisp
  (use-package company :defer t :diminish
    :init
    (setq company-idle-delay 0.3
          company-dabbrev-ignore-case t
          company-selection-wrap-around t)
    (global-company-mode)
    :config
    (defun org-keyword-backend (command &optional arg &rest ignored)
      "Company backend for org keywords.
  COMMAND, ARG, IGNORED are the arguments required by the variable
  `company-backends', which see."
      (interactive (list 'interactive))
      (cl-case command
        (interactive (company-begin-backend 'org-keyword-backend))
        (prefix (and (eq major-mode 'org-mode)
                     (let ((p (company-grab-line "^#\\+\\(\\w*\\)" 1)))
                       (if p (cons p t)))))
        (candidates (mapcar #'upcase
                            (cl-remove-if-not
                             (lambda (c) (string-prefix-p arg c))
                             (pcomplete-completions))))
        (ignore-case t)
        (duplicates t)))
    (add-to-list 'company-backends 'org-keyword-backend)

    (set (make-local-variable 'company-backends) '(company-css company-web-html company-yasnippet company-files))
    (define-key company-active-map (kbd "ESC") 'company-abort)
    (define-key company-active-map [tab] 'company-complete-common-or-cycle)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+END_SRC

* Perspective | [[https://github.com/nex3/perspective-el][github]]
workflow common commands:
- C-x x P to investigate a new project with its new perspective (this
also saves off whatever I was doing)
- C-x x x switches to whatever I was doing before
- C-x x s switches to a projectâ€™s perspective based on its name

in order to use persp-switch-project and see only project buffers in 'switch-buffer' menu install back ido
from [[https://github.com/Seme4eg/emacs_init/commit/2620f1a411c159cd6c7a7fac84a62839560766c5][this commit]] and bind ',bp' to 'ido-switch-buffer' ([[https://github.com/bbatsov/persp-projectile][link]])

#+BEGIN_SRC emacs-lisp
  ;; this might once come handy
  ;; (evil-leader/set-key "cs" 'window-configuration-to-register)
  ;; (evil-leader/set-key "cr" 'jump-to-register)

  ;; (use-package perspective
  ;;   :demand t
  ;;   :init
  ;;   (define-key evil-normal-state-map (kbd ",z") 'perspective-map)
  ;;   (persp-mode)
  ;;   (use-package persp-projectile
  ;;     :init (define-key evil-normal-state-map (kbd ",zP") 'projectile-persp-switch-project))
  ;;   :config
  ;;   (setq persp-state-default-file "~/.emacs.d/perspectives")
  ;;   (add-hook 'kill-emacs-hook 'persp-state-save)
  ;;   (define-key perspective-map (kbd "l") 'persp-state-load)
  ;;   (define-key perspective-map (kbd "x") 'persp-switch-last)
  ;;   (define-key evil-normal-state-map (kbd "gt") 'persp-next)
  ;;   (define-key evil-normal-state-map (kbd "gT") 'persp-prev))
#+END_SRC

* Silversearch front
** wgrep | [[https://github.com/mhayashi1120/Emacs-wgrep][github]]
#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    :config
    (setq wgrep-auto-save-buffer t)
    (defadvice wgrep-change-to-wgrep-mode (after wgrep-set-normal-state)
      (if (fboundp 'evil-normal-state)
          (evil-normal-state)))
    (ad-activate 'wgrep-change-to-wgrep-mode)

    (defadvice wgrep-finish-edit (after wgrep-set-motion-state)
      (if (fboundp 'evil-motion-state)
          (evil-motion-state)))
    (ad-activate 'wgrep-finish-edit))
#+END_SRC

** ag | [[https://agel.readthedocs.io/en/latest/usage.html][documentation]]
allows you to search using ag from inside Emacs. You can filter by
file type, edit results inline, or find files

installation on [[https://github.com/ggreer/the_silver_searcher/wiki/Windows][windows]]

#+BEGIN_SRC emacs-lisp
  (use-package ag
    :config
    (use-package wgrep-ag :commands (wgrep-ag-setup))
    ;; (add-to-list 'ag-arguments "--word-regexp"))
    (add-hook 'ag-mode-hook
              (lambda ()
                (wgrep-ag-setup)
                (define-key ag-mode-map (kbd "n") 'evil-search-next)
                (define-key ag-mode-map (kbd "N") 'evil-search-previous)))
    (setq ag-highlight-search t
          ag-reuse-buffers t
          ag-reuse-window t))
#+End_SRC

* Treemacs
todo: [[https://github.com/Alexander-Miller/treemacs#tag-view][ggtags integration]]
*python* executable is needed

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    (evil-leader/set-key
      "nn" 'treemacs
      "nB" 'treemacs-bookmark
      "nff" 'treemacs-find-file
      "nft" 'reemacs-find-tag
      "n0" 'treemacs-select-window
      "n1" 'treemacs-delete-other-windows
      "nP" 'treemacs-projectile
      ;; Add current project to treemacs and open it
      "npa" 'treemacs-add-and-display-current-project)

    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-follow-delay             0.2
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        t ;; nil
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-project-expand 'on-distance ;; ?
            treemacs-silent-filewatch              t ;; nil
            treemacs-silent-refresh                t ;; nil
            treemacs-sorting                       'alphabetic-desc
            treemacs-space-between-root-nodes      nil ;; t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-width                         32) ;; 35

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      ;; displays a little icon in the fringe that moves with the cursor
      (treemacs-fringe-indicator-mode t)

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))))

  (use-package treemacs-evil :after treemacs evil)
  (use-package treemacs-projectile :after treemacs projectile)

  ;; (use-package treemacs-icons-dired
  ;;   :after treemacs dired
  ;;   :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit :after treemacs magit)
#+END_SRC


* Development
** Web-mode | [[web-mode.org][documentation]]
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :config
    (setq web-mode-style-padding 2
          web-mode-script-padding 2
          web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-attr-indent-offset t
          web-mode-sql-indent-offset 2
          web-mode-indent-style 2
          web-mode-enable-current-column-highlight t
          web-mode-enable-current-element-highlight t)

    (define-key web-mode-map (kbd "C-n") 'web-mode-tag-match)

    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.js$" . web-mode))

    ;; set up per-language ac-sources FIX
    ;;  (setq web-mode-ac-sources-alist
    ;;	'(("css" . (ac-source-css-property ac-source-emmet-css-snippets))))

    (add-hook 'web-mode-hook
              (lambda ()
                ;; (js2-refactor-mode) ;; no Javascript AST available in web-mode
                (yas-activate-extra-mode 'js2-mode)
                (emmet-mode)
                (prettier-js-mode)))

    (add-hook 'web-mode-before-auto-complete-hooks
              (lambda ()
                 (let ((web-mode-cur-language (web-mode-language-at-pos)))
                   (if (string= web-mode-cur-language "php")
                       (yas-activate-extra-mode 'php-mode)
                     (yas-deactivate-extra-mode 'php-mode))
                   ;; (if (string= web-mode-cur-language "css")
                   ;;     (setq emmet-use-css-transform t)
                   ;; (setq emmet-use-css-transform nil))
                   )))
    )
#+END_SRC

** JS settings
*** js2-mode | [[https://github.com/mooz/js2-mode][github]]
Improved JavaScript editing mode for GNU Emacs

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :init
    ;; two settings below are ignored if they are in setq-default in some reason
    (setq js2-basic-indent 2
          js2-basic-offset 2)
    (setq-default js2-auto-indent-p t
                  js2-cleanup-whitespace t
                  js2-enter-indents-newline t
                  js2-indent-on-enter-key t
                  js2-global-externs (list "window" "module" "require" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON" "jQuery" "$"))
    :config
    (setq js2-strict-missing-semi-warning nil)
    (setq js2-missing-semi-one-line-override t)
    ;; (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . js2-jsx-mode))
    (add-to-list 'interpreter-mode-alist '("node" . js2-jsx-mode))
    (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode)))
#+END_SRC

*** tern
The [[https://ternjs.net/doc/manual.html#emacs][Tern]] project is a JavaScript analyzer that can be used to improve the JavaScript integration with editors
like Emacs.

to install packages globally withoug /EACCESS/ error go [[https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally][here]], then ~npm i -g tern~

~,tf~ - Jump to the definition of the thing under the cursor.
~,tp~ - Brings you back to last place you were when you pressed M-..
~C-c C-r~ - Rename the variable under the cursor.
~C-c C-c~ - Find the type of the thing under the cursor.
~C-c C-d~ - Find docs of the thing under the cursor. Press again to open the associated URL (if any).

> alternative to tern (but for different langs) - *dumb jump*

#+BEGIN_SRC emacs-lisp
  (use-package tern
     :init
     (add-to-list 'load-path "~/.npm-global/lib/node_modules/tern/emacs/")
     (autoload 'tern-mode "tern.el" nil t)
     (add-hook 'js2-mode-hook (lambda () (tern-mode t)))
     (evil-leader/set-key
       "th" 'tern-highlight-refs
       "tf" 'tern-find-definition
       "tn" 'tern-find-definition-by-name
       "tp" 'tern-pop-find-definition))
#+END_SRC

*** js2-refactor | [[https://github.com/magnars/js2-refactor.el][github (shortcuts)]]
#+BEGIN_SRC emacs-lisp
  (use-package js2-refactor
    :init
    (add-hook 'js2-mode-hook #'js2-refactor-mode)
    :config
    (js2r-add-keybindings-with-prefix "C-c b")
    (define-key key-translation-map (kbd ",r") (kbd "C-c b")))
#+END_SRC

*** js-prettier
In order for this package to work install 'prettier' globally: ~npm i -g prettier~

#+BEGIN_SRC emacs-lisp
  ;; (use-package add-node-modules-path
  ;;   :init
  ;;   (add-hook 'js-mode-hook #'add-node-modules-path))

  (use-package prettier-js
    :init
    (add-hook 'js2-mode-hook 'prettier-js-mode)
    (setq prettier-js-args '(
                             "--trailing-comma" "all"
                             "--single-quote" "true"
                             "--arrow-parens" "avoid"
                             "--space-before-function-paren" "true"
                             )))

  ;; (eval-after-load 'web-mode
  ;;     '(progn
  ;;        (add-hook 'web-mode-hook #'add-node-modules-path)
  ;;        (add-hook 'web-mode-hook #'prettier-js-mode)))
#+END_SRC

** Pug-mode
#+BEGIN_SRC emacs-lisp
  (use-package pug-mode)
#+END_SRC

** Stylus-mode
#+BEGIN_SRC emacs-lisp
  (use-package stylus-mode)
#+END_SRC
** Skewer | [[https://github.com/skeeto/skewer-mode][github]]
Kick things off with ~run-skewer~, and then:

~C-x C-e~ - `skewer-eval-last-expressionâ€™
~C-M-x~ - `skewer-eval-defunâ€™
~C-c C-k~ - `skewer-load-bufferâ€™
#+BEGIN_SRC emacs-lisp
  (use-package skewer-mode
    :init
    (add-hook 'js2-mode-hook 'skewer-mode)
    (add-hook 'css-mode-hook 'skewer-css-mode)
    (add-hook 'html-mode-hook 'skewer-html-mode))
#+END_SRC

** color-identifiers-mode
#+BEGIN_SRC emacs-lisp
  (use-package color-identifiers-mode
    :hook prog-mode)
#+END_SRC

** Smartparents | [[https://github.com/Fuco1/smartparens][github]]
[[https://github.com/expez/evil-smartparens][evil-smartparents github]] and smartparents [[https://www.youtube.com/watch?v=ykjRUr7FgoI&list=PLP6Xwp2WTft7rAMgVPOTI2OE_PQlKGPy7&feature=plpp_play_all][video tutorial]]

~C-M-Space {key}~ - wrap region (or just try pressing {key} when region is active)
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :init (add-hook 'prog-mode-hook 'smartparens-mode)
    (use-package evil-smartparens
      :init (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
    (evil-leader/set-key
      "s(" 'sp-backward-unwrap-sexp ;; unwrap parent expression
      "s)" 'sp-unwrap-sexp ;; unwrap current expression
      "su" 'sp-splice-sexp ;; unwrap current expression
      "s]" 'sp-forward-slurp-sexp ;; [foo bar] baz --> [foo bar baz]
      "s[" 'sp-forward-barf-sexp ;; [foo bar baz] --> [foo bar] baz
      "ss" 'sp-transpose-sexp ;; "foo" and "bar" to trade places
      "sn" 'sp-forward-sexp ;; move to next expression
      "sp" 'sp-backward-sexp) ;; move to next expression
    )
#+END_SRC

** Flycheck | [[https://www.flycheck.org/en/latest/][guide]]
check also [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#spell-checking][this]] setup later

to use eslint install it: ~npm i -g eslint~

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish flyspell-mode
    :init
    (setq ispell-program-name "C:/Program Files (x86)/Aspell/bin/aspell.exe"
          ispell-list-command "--list")

    ;; (global-flycheck-mode)
    ;; (add-hook 'prog-mode-hook 'flyspell-prog-mode) ;; for now stick to this variant
    (add-hook 'prog-mode-hook 'flycheck-mode)

    (evil-leader/set-key
      "fb" 'flycheck-buffer
      "fc" 'flycheck-clear
      "fn" 'flycheck-next-error
      "fp" 'flycheck-previous-error
      "fs" 'flycheck-list-errors)

    :config
    (flycheck-add-mode 'javascript-eslint 'js2-mode-hook)
    )
#+END_SRC

** Emmet-mode | [[https://github.com/smihica/emmet-mode][github]]
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :hook (sgml-mode css-mode)
    :commands emmet-mode
    :init
    (setq
     emmet-indentation 2
     emmet-move-cursor-between-quotes t))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :init
    (evil-leader/set-key
      "gi" 'magit-init
      "gs" 'magit-status))
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (use-package yasnippet-snippets)
    (yas-reload-all) ;; ur custom snippets won't work untill u run this
    (add-hook 'prog-mode-hook #'yas-minor-mode))
#+END_SRC


* Misc
** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :init (setq avy-background t)
    :config
    (evil-leader/set-key "SPC" 'avy-goto-char))
#+END_SRC

** Sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :bind ("s-f" . sudo-edit))
#+END_SRC

** Switch-window
alternative - 'Ace-window'

#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :config
    (setq switch-window-input-style 'minibuffer
          switch-window-increase 4
          switch-window-threshold 2 ;; after how many windows will this pop up
          switch-window-shortcut-style 'qwerty
          switch-window-qwerty-shortcuts '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window)) ;; remap default funciton with 'switch-window'
#+END_SRC

** Dmenu
~<leader> d~ - runs small terminal for launching applications (run and type 'discord')
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :init (evil-leader/set-key "d" 'dmenu))
#+END_SRC

** Which-key | [[https://github.com/justbur/emacs-which-key][github]]
~C-h~ - paging options
- ~n~ / ~C-n~ - cycle throught pages *forward*
- ~p~ / ~C-p~ - ..
- ~!~ / ~u~ - undo last entered key
- ~h~ - call default command bound to ~C-h~

#+BEGIN_SRC emacs-lisp
  (use-package which-key :diminish
    :init
    (which-key-mode)
    (which-key-show-major-mode))
#+END_SRC

** Popup-kill-ring
~M-y~ - get popup with things u previously deleted..
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :bind ("M-y" . popup-kill-ring))
#+END_SRC


* Set up -->
** G[g]tags | [[https://github.com/leoliu/ggtags][github]]

[[https://github.com/howardabrams/dot-files/blob/master/emacs.org#tag-support][another option]]

#+BEGIN_SRC emacs-lisp
  ;; == trying to make ggtags work ==
  ;; (use-package ggtags
  ;;   :hook (prog-mode . ggtags-mode))


  ;; (when (and (maybe-require-package 'gtags)
  ;;            (maybe-require-package 'bpr))
  ;;   ;; Bind some useful keys in the gtags select buffer that evil overrides.
  ;;   (add-hook 'gtags-select-mode-hook
  ;;             (lambda ()
  ;;               (evil-define-key 'normal gtags-select-mode-map (kbd "RET") 'gtags-select-tag)
  ;;               (evil-define-key 'normal gtags-select-mode-map (kbd "q") 'kill-buffer-and-window)))
  ;;
  ;; (provide 'init-gtags)

  ;; === or

  ;; (use-package gtags
  ;;   :init
  ;;   ;; Bind some useful keys in the gtags select buffer that evil overrides.
  ;;   (add-hook 'gtags-select-mode-hook
  ;;             (lambda ()
  ;;               (evil-define-key 'normal gtags-select-mode-map (kbd "RET") 'gtags-select-tag)
  ;;               (evil-define-key 'normal gtags-select-mode-map (kbd "q") 'kill-buffer-and-window))))

  ;; === functions:
  ;;
  ;; (defun gtags-reindex ()
  ;;   "Kick off gtags reindexing."
  ;;   (interactive)
  ;;   (let* ((root-path (expand-file-name (vc-git-root (buffer-file-name))))
  ;;          (gtags-filename (expand-file-name "GTAGS" root-path)))
  ;;     (if (file-exists-p gtags-filename)
  ;;         (gtags-index-update root-path)
  ;;       (gtags-index-initial root-path))))
  ;;
  ;; (defun gtags-index-initial (path)
  ;;   "Generate initial GTAGS files for PATH."
  ;;   (let ((bpr-process-directory path))
  ;;     (bpr-spawn "gtags")))
  ;;
  ;; (defun gtags-index-update (path)
  ;;   "Update GTAGS in PATH."
  ;;   (let ((bpr-process-directory path))
  ;;     (bpr-spawn "global -uv"))))
#+END_SRC


* User functions
** Config edit/reload
#+BEGIN_SRC emacs-lisp
  ;; edit
  (defun config-visit()
    (interactive)
    ;; (find-file "~/.emacs.d/config/config.org"))
    (find-file "~/.emacs.d/config/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)

  ;; reload
  (defun config-reload()
    (interactive)
    (org-babel-load-file (get-fullpath "config/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** Identation & buffer cleanups
This re-indents, untabifies, and cleans up whitespace
#+BEGIN_SRC emacs-lisp
  (defun untabify-buffer ()
    (interactive)
    (untabify (point-min) (point-max)))

  (defun indent-buffer ()
    (interactive)
    (indent-region (point-min) (point-max)))

  (defun cleanup-buffer ()
    "Perform a bunch of operations on the whitespace content of a buffer."
    (interactive)
    (indent-buffer)
    (untabify-buffer))

  "Remove tmux artifacts from region."
  (defun cleanup-region (beg end)
    (interactive "r")
    (dolist (re '("\\\\â”‚\Â·*\n" "\W*â”‚\Â·*"))
      (replace-regexp re "" nil beg end)))

  (global-set-key (kbd "C-x M-t") 'cleanup-region) ;; make this function autorun when saving 'prog-mode files
#+END_SRC

** Window splitting
#+BEGIN_SRC emacs-lisp
  ;; evil-window-vsplit
  ;; (setq evil-window-split 'split-and-follow-hor)
  (defun evil-window-split()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun evil-window-vsplit()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+END_SRC

** Development
select a region and add wrap it in tag... properly
#+BEGIN_SRC emacs-lisp
  (defun surround-html (start end tag)
     "Wraps the specified region (or the current 'symbol / word'
   with a properly formatted HTML tag."
     (interactive "r\nsTag: " start end tag)
     (save-excursion
       (narrow-to-region start end)
       (goto-char (point-min))
       (insert (format "<%s>" tag))
       (goto-char (point-max))
       (insert (format "</%s>" tag))
       (widen)))

  (define-key html-mode-map (kbd "C-c C-t") 'surround-html)
#+END_SRC
** Other f-s
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list))) ;; loop thrue list
  ;; set kbd if u will use it often

  (defun sad/insert-line-before (times)
    ;; insert a line 'above' cur. cursor position
    (interactive "p")
    (save-excursion
      (move-beginning-of-line 1)
      (newline times)))

  (global-set-key (kbd "C-S-o") 'sad/insert-line-before) ;; `C-6 {binded kbd}`
#+END_SRC
