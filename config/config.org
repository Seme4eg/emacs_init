* Use-package
Automatically install certain packages, as well as the ease of lazily loading them
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package) ;; if not..
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (require 'use-package-ensure)
  (setq use-package-always-ensure t) ;; instead of putting ':ensure' everywhere
#+END_SRC
* Evil
** evil itself
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init (evil-mode t)
    :bind ("M-c" . evil-normal-state)
    :config
    ;; brings cursor at the middle of the screen after pressing 'n' in evil-mode
    (defadvice evil-ex-search-next (after advice-for-evil-ex-search-next activate)
      (evil-scroll-line-to-center (line-number-at-pos))))
#+END_SRC
** evil-leader
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :init
    (setq evil-leader/in-all-states 1)
    (global-evil-leader-mode)
    (evil-leader/set-leader ","))
#+END_SRC

** evil Multiple-Cursors | [[https://github.com/gabesoft/evil-mc][github]]
#+BEGIN_SRC emacs-lisp
  (use-package evil-mc
    :init
    (global-evil-mc-mode 1)
    (evil-define-key 'visual evil-mc-key-map
      "A" #'evil-mc-make-cursor-in-visual-selection-end
      "I" #'evil-mc-make-cursor-in-visual-selection-beg))

  (evil-leader/set-key "ma" 'evil-mc-make-all-cursors)
  (evil-leader/set-key "mz" 'evil-mc-undo-all-cursors)
  (evil-leader/set-key "mn" 'evil-mc-make-and-goto-next-match)
  (evil-leader/set-key "mp" 'evil-mc-make-and-goto-prev-match)
  (evil-leader/set-key "mf" 'evil-mc-skip-and-goto-next-match)
  (evil-leader/set-key "mb" 'evil-mc-skip-and-goto-prev-match)
  (evil-leader/set-key "mu" 'evil-mc-undo-last-added-cursor)
#+END_SRC

* Environment
** Identation
I have learned to distrust tabs in my source code, so let’s make sure
that we only have spaces. See this [[http://ergoemacs.org/emacs/emacs_tabs_space_indentation_setup.html][discussion]] for details.
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq tab-width 2)

  ;; make return key also do indent, globally (test)
  (electric-indent-mode 1)

  ;; Make tab key do indent first then completion.
  (setq-default tab-always-indent 'complete)
#+END_SRC
** Major settings
#+BEGIN_SRC emacs-lisp
  (setq fill-column 80)

  (setq x-select-enable-clipboard t)
  (desktop-save-mode 1) ;; automatically save/restore sessions

  (setq make-backup-files nil) ;; disable backup files
  (setq auto-save-default nil) ;; disable auto-save files

  (defalias 'yes-or-no-p 'y-or-n-p) ;; Yes and No prompt

  ;; no need to re-enable each feature bit-by-bit:
  (setq disabled-command-function nil)

  ;; Misc
  (setq echo-keystrokes 0.1 ;; Turn down the time to echo keystrokes
          use-dialog-box nil ;; use the echo area instead of dialog boxes
          visible-bell t) ;; Use a visual indicator instead of making horrible noises

  ;; Vendor directory (for manually installed packages)
  (defvar sads/vendor-dir (expand-file-name "vendor" user-emacs-directory))
  (add-to-list 'load-path sads/vendor-dir)

  (dolist (project (directory-files sads/vendor-dir t "\\w+"))
  (when (file-directory-p project)
      (add-to-list 'load-path project)))
#+END_SRC

** Init file support
#+BEGIN_SRC emacs-lisp
  ;; (require 'cl)
  (require 'cl-lib) ;; new library for common-lib compatability

  (use-package dash
    :ensure t
    :config (eval-after-load "dash" '(dash-enable-font-lock)))

  (use-package s :ensure t)
  (use-package f :ensure t)
#+END_SRC
** Modes
#+BEGIN_SRC emacs-lisp
  ;; marking text
  (delete-selection-mode t)
  (transient-mark-mode t)

  (global-prettify-symbols-mode t) ;; type 'lambda' to understand

  ;; to be able to move in camelCase
  (global-subword-mode 1)
  (global-linum-mode 1)

  ;; make electric-pair-mode work on more brackets
  ;; disabled function below cuz it inserts '' even in "don't'" words..
  ;; (setq electric-pair-pairs
  ;;       '(
  ;; 	(?\' . ?\')))
  (electric-pair-mode 1) ;; insert pair of () "" [] {}

  (global-auto-revert-mode nil)
  (flyspell-mode nil)
  (add-hook 'markdown-mode-hook 'auto-fill-mode)

  ;; Web
  ;; shell-script-mode
  (add-to-list 'auto-mode-alist '("\\.zsh$" . shell-script-mode))

  ;; conf-mode
  (add-to-list 'auto-mode-alist '("\\.gitconfig$" . conf-mode))
  (add-to-list 'auto-mode-alist '("\\.gitignore$" . conf-mode))

  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-;") 'comment-or-uncomment-region)
  (global-set-key (kbd "C-<tab>") 'dabbrev-expand)
  (define-key minibuffer-local-map (kbd "C-<tab>") 'dabbrev-expand)
  ;; paste from clipboard by middle mouse button
  (global-set-key (kbd "<mouse-2>") 'clipboard-yank)
#+END_SRC

** Navigation
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key "w" 'save-buffer)
  (evil-leader/set-key "bd" 'kill-buffer)
  (evil-leader/set-key "bm" 'ibuffer)
  (evil-leader/set-key "bo" 'switch-to-buffer)
  (global-set-key (kbd "C-c p") 'mode-line-other-buffer)
#+END_SRC

** Not used / unknown purpose
   #+BEGIN_SRC emacs-lisp
     ;; (setenv "PATH" (concat "/usr/local/bin:/opt/local/bin:/usr/bin:/bin" (getenv "PATH")))

     ;; Terminal setup (stop prompt appearing each time when starting 'ansi-term')
     ;; (defvar my-term-shell "/bin/bash")
     ;; (defadvice ansi-term (before force-bash)
     ;;   (interactive (list my-term-shell)))
     ;; (ad-activate 'ansi-term)

     ;; (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
     ;; (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

     ;; Allow confusing functions
     (put 'narrow-to-region 'disabled nil)
   #+END_SRC


* Appearance
** Packages
*** Spacemacs-theme
#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-common
      :ensure spacemacs-theme
      :config (load-theme 'spacemacs-dark t))
#+END_SRC

*** Rainbow
couldn't use just ~:hook prog-mode)~ cuz it transforms into
~:hook (prog-mode . rainbow-delimiters)~ and doesn't add ~-mode~
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :hook prog-mode)

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

*** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "Yo, me"))
#+END_SRC

*** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :init (setq avy-background t)
    :config
    (evil-leader/set-key "SPC" 'avy-goto-char))
#+END_SRC

*** Spaceline / Powerline
#+BEGIN_SRC emacs-lisp
  ;; (use-package powerline
  ;;   :init (powerline-default-theme))

  (use-package spaceline
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC

**** Diminish
hide some major modes in spaceline
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :init
    (diminish 'projectile-mode)
    (diminish 'subword-mode)
    (diminish 'rainbow-mode)
    (diminish 'evil-mc-mode)
    (diminish 'undo-tree-mode))
#+END_SRC

** Display settings
#+BEGIN_SRC emacs-lisp
  ;; Splash Screen
  (setq inhibit-splash-screen t
      initial-scratch-message nil
      initial-major-mode 'org-mode)

  ;; Get rid of the beeps
  (setq visible-bell t)

  ;; Scroll-, tool-, menu bars*
  (menu-bar-mode -1)
  (when (window-system)
    (tool-bar-mode 0)               ;; Toolbars were only cool with XEmacs
    (when (fboundp 'horizontal-scroll-bar-mode)
      (horizontal-scroll-bar-mode -1))
    (scroll-bar-mode -1))            ;; Scrollbars are waste screen estate

  ;; (if window-system (toggle-scroll-bar -1))
#+END_SRC
** Other visual settings
#+BEGIN_SRC emacs-lisp
  ;; Change cursor color depending on mode (only GUI emacs)
  (setq evil-emacs-state-cursor '("cyan" box))
  (setq evil-normal-state-cursor '("cyan" box))
  (setq evil-visual-state-cursor '("orange" box))
  (setq evil-insert-state-cursor '("green" bar))
  (setq evil-replace-state-cursor '("red" bar))
  (setq evil-operator-state-cursor '("cyan" hollow))

  ;; Display Settings
  (setq-default indicate-empty-lines t)
  (when (not indicate-empty-lines)
  (toggle-indicate-empty-lines))

  (show-paren-mode t) ;; highlight parentheses
#+END_SRC
** Not used / known
   #+BEGIN_SRC emacs-lisp
     ;; when in GUI - highlight the line with the cursor
     ;; didn't enable cuz of the comment line highlighting in emacs theme
     ;; (when window-system (global-hl-line-mode t))

     ;; highlight the line with the cursor
     ;; (when window-system (global-hl-line-mode t))

     ;; Color Codes
     (require 'ansi-color)
     (defun colorize-compilation-buffer ()
       (toggle-read-only)
       (ansi-color-apply-on-region (point-min) (point-max))
       (toggle-read-only))
     (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
   #+END_SRC


* Default packages
** Dired
#+BEGIN_SRC emacs-lisp
  (setq dired-dwim-target t)
  (put 'dired-find-alternate-file 'disabled nil)

  (require 'dired-x)
  (setq dired-omit-files "^\\.?#\\|^\\.[^.].*")

  (defun air-dired-buffer-dir-or-home ()
    "Open dired to the current buffer's dir, or $HOME."
    (interactive)
    (let ((cwd (or (file-name-directory (or (buffer-file-name) ""))
		   (expand-file-name "~"))))
      (dired cwd)))

  (add-hook 'dired-mode-hook (lambda ()
			       (dired-omit-mode t)))

  (eval-after-load 'wdired
    (add-hook 'wdired-mode-hook 'evil-normal-state))
#+END_SRC

** Other
#+BEGIN_SRC emacs-lisp
  (add-hook 'css-mode-hook (lambda ()
			     (rainbow-mode)))
#+END_SRC
* Packages update
*slows down the startup A LOT*
#+BEGIN_SRC emacs-lisp
  ;; (use-package auto-package-update
  ;;   :config
  ;;   (setq auto-package-update-delete-old-versions t)
  ;;   (setq auto-package-update-hide-results t)
  ;;   (auto-package-update-maybe))
#+END_SRC

* ORG
** main settings
#+BEGIN_SRC emacs-lisp
  (use-package org

    :init
    ;; kbd
    (evil-leader/set-key "oc" 'org-capture)
    (evil-leader/set-key "oa" 'org-agenda)
    ;; (add-hook 'org-mode-hook (lambda () (flyspell-mode)))
    (add-hook 'org-mode-hook (lambda () (abbrev-mode 1)))

    :hook ((org-mode-hook . org-indent-mode)
           (org-mode-hook . auto-fill-mode))

    :config
    (setq org-list-description-max-indent 5)
    ;; prevent demoting heading also shifting text inside sections
    (setq org-adapt-indentation nil)
    ;; open code edit buffers in the same window
    (setq org-src-window-setup 'current-window)
    ;; enable logging when tasks are complete
    (setq org-log-done t
          org-todo-keywords '((sequence "TODO" "INPROGRESS" "DONE"))
          org-todo-keyword-faces '(("INPROGRESS" . (:foreground "blue" :weight bold))))

    ;; handling errors
    :catch (lambda (keyword err)
             (message (error-message-string err))))

  ;; there is also *org-agenda* and *org-habit* setup in this tut, but i skipped it for now
#+END_SRC
** visual settings
#+BEGIN_SRC emacs-lisp
  ;; bullets instead of asteric
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))

  (setq org-src-fontify-natively t) ;;syntax highlight code blocks
#+END_SRC
** org-babel
#+BEGIN_SRC emacs-lisp
  ;; (require 'ob) ;; don't know what for is this line

  ;; embedd languages inside .org files with proper font-locking
  ;; Allows to extract and execute code.
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (js . t)
     (C . t)))

  ;; (setq org-confirm-babel-evaluate nil)
  ;;
  ;; (add-hook 'org-babel-after-execute-hook (lambda ()
  ;;                                           (condition-case nil
  ;;                                               (org-display-inline-images)
  ;;                                             (error nil)))
  ;;           'append)

#+END_SRC

** agenda/todo setup
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (quote ("~/Desktop/todo.org"))) ;; dunno if it's gonna work

  ;; keybindings
  (evil-leader/set-key "oc" 'org-capture)
  (evil-leader/set-key "oa" 'org-agenda)

  ;;set priority range from A to C with default A
  (setq org-highest-priority ?A)
  (setq org-lowest-priority ?C)
  (setq org-default-priority ?A)

  ;;set colours for priorities
  (setq org-priority-faces '((?A . (:foreground "#F0DFAF" :weight bold))
			     (?B . (:foreground "LightSteelBlue"))
			     (?C . (:foreground "OliveDrab"))))

  ;;open agenda in current window
  (setq org-agenda-window-setup (quote current-window))

  (setq org-capture-templates
	'(("t" "todo" entry (file+headline "~/Desktop/todo.org" "Tasks")
	   "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n")))

  ;; org-mode agenda options

  (setq org-deadline-warning-days 7) ;; warn of any deadlines in next 7 days
  (setq org-agenda-span (quote fortnight)) ;;show tasks scheduled in next fortnight
  (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
  (setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
  ;;don't show tasks that are scheduled or have deadlines in the normal todo list
  (setq org-agenda-todo-ignore-deadlines (quote all))
  (setq org-agenda-todo-ignore-scheduled (quote all))

  ;;sort tasks in order of when they are due and then by priority
  (setq org-agenda-sorting-strategy
    (quote
     ((agenda deadline-up priority-down)
      (todo priority-down category-keep)
      (tags priority-down category-keep)
      (search category-keep))))
#+END_SRC

** snippets
now after typing '<el TAB' u will get code block with 'emacs-lisp' src
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
* Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode))
    :init
    ;; use a custom css file to make it a little prettier
    (setq markdown-css-paths `(expand-file-name "markdown.css" sads/vendor-dir))
    ;; generate HTML previews from within the mode
    ;; (setq markdown-command "pandoc --smart -f markdown -t html"))
    (setq markdown-command "markdown"))

  ;; prev. settings
  ;; (add-hook 'markdown-mode-hook
  ;; 	  (lambda ()
  ;; 	    (visual-line-mode t)
  ;; 	    (flyspell-mode t)))
#+END_SRC
* IVY | [[https://oremacs.com/swiper/][manual]]
  ido | helm | ivy -- 3 different ways
** IVY enable
[[https://github.com/abo-abo/swiper#counsel][counsel setup]]
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :config
    (use-package flx)
    (ivy-mode 1)
    (counsel-mode 1)
    :bind
    ("C-s" . swiper-isearch)
    :init
    (setq ivy-use-virtual-buffers t)
    ;; (setq ivy-count-format "(%d/%d) ")
    (setq ivy-count-format "")
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-re-builders-alist
          '((t . ivy--regex-fuzzy))))
#+END_SRC
** Smex
*Package to get completion in ~M-x~ menu (and most used commands will be at top)*
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :init (smex-initialize)
    :bind ("M-X" . smex-major-mode-commands))

  ;; don't know for what is setting below
  ;; (setq smex-save-file (expand-file-name ".smex-items" user-emacs-directory))
#+END_SRC

* Projectile | [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#block-wrappers][source]]
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :init
    (projectile-global-mode 1)
    (setq projectile-keymap-prefix (kbd "C-x p"))
    (evil-leader/set-key "pf" 'projectile-find-file)
    ;; rebind this to some leader keys
    ;; ("C-x p s" . projectile-ag)
    :bind (("C-x p p" . projectile-switch-project)
           ("C-x p g" . projectile-grep)
           ("C-x p R" . projectile-regenerate-tags))
    :commands projectile-ag
    :config
    (setq projectile-switch-project-action 'projectile-commander
          projectile-completion-system 'ivy
          projectile-create-missing-test-files t)
    ;; (add-to-list 'projectile-globally-ignored-files ".DS_Store")

    (def-projectile-commander-method ?d
      "Open project root in dired."
      (projectile-dired))

    (def-projectile-commander-method ?s
      "Open a *shell* buffer for the project."
      (projectile-run-shell))

    (def-projectile-commander-method ?F
      "Git fetch."
      (magit-status)
      (call-interactively #'magit-fetch-current)))
#+END_SRC

* Company
[[https://github.com/company-mode/company-mode/issues/68#issuecomment-36208504][company vs auto-complete]]

#+BEGIN_SRC emacs-lisp
  (use-package company
    :defer t
    :init
    (global-company-mode)

    :config
    (defun org-keyword-backend (command &optional arg &rest ignored)
      "Company backend for org keywords.
  COMMAND, ARG, IGNORED are the arguments required by the variable
  `company-backends', which see."
      (interactive (list 'interactive))
      (cl-case command
	(interactive (company-begin-backend 'org-keyword-backend))
	(prefix (and (eq major-mode 'org-mode)
		     (let ((p (company-grab-line "^#\\+\\(\\w*\\)" 1)))
		       (if p (cons p t)))))
	(candidates (mapcar #'upcase
			    (cl-remove-if-not
			     (lambda (c) (string-prefix-p arg c))
			     (pcomplete-completions))))
	(ignore-case t)
	(duplicates t)))
    (add-to-list 'company-backends 'org-keyword-backend)

    (set (make-local-variable 'company-backends) '(company-css company-web-html company-yasnippet company-files))
    (setq company-idle-delay 0.4)
    (setq company-selection-wrap-around t)
    (define-key company-active-map (kbd "ESC") 'company-abort)
    (define-key company-active-map [tab] 'company-complete-common-or-cycle)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+END_SRC

* Switch-window
alternative - 'Ace-window'

#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2) ;; after how many windows will this pop up
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ;; remap default funciton with 'switch-window'
    ([remap other-window] . switch-window))
#+END_SRC

* Dmenu
~<leader> t~ - runs small terminal for launching applications (run and type 'discord')
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :init
    (evil-leader/set-key "t" 'dmenu))
#+END_SRC
* Popup-kill-ring
~M-y~ - get popup with things u previously deleted..
~C-n/p~ - cycle through them
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
* Wrap-region | [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#block-wrappers][source]]
#+BEGIN_SRC emacs-lisp
  (use-package wrap-region
    :config
    (wrap-region-global-mode t)
    (wrap-region-add-wrappers
     '(("(" ")")
       ("[" "]")
       ("{" "}")
       ("<" ">")
       ("'" "'")
       ("\"" "\"")
       ("‘" "’"   "q")
       ("“" "”"   "Q")
       ("*" "*"   "b"   org-mode)                 ; bolden
       ("*" "*"   "*"   org-mode)                 ; bolden
       ("/" "/"   "i"   org-mode)                 ; italics
       ("/" "/"   "/"   org-mode)                 ; italics
       ("~" "~"   "c"   org-mode)                 ; code
       ("~" "~"   "~"   org-mode)                 ; code
       ("=" "="   "v"   org-mode)                 ; verbatim
       ("=" "="   "="   org-mode)                 ; verbatim
       ("_" "_"   "u" '(org-mode markdown-mode))  ; underline
       ("**" "**" "b"   markdown-mode)            ; bolden
       ("*" "*"   "i"   markdown-mode)            ; italics
       ("`" "`"   "c" '(markdown-mode))           ; code
       ("`" "'"   "c"   lisp-mode)                ; code
       ))
    :diminish wrap-region-mode)
#+END_SRC
* Sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :bind ("s-f" . sudo-edit))
#+END_SRC

* Workgroups | [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#workgroups][source]]
Periodically check [[https://github.com/pashinin/workgroups2][workgroups2]]

#+BEGIN_SRC emacs-lisp
  ;; (evil-leader/set-key "cs" 'window-configuration-to-register)
  ;; (evil-leader/set-key "cr" 'jump-to-register)
#+END_SRC


* Development
** Web-mode | [[web-mode.org][documentation]]
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :defer t
    :config
    (setq web-mode-style-padding 2)
    (setq web-mode-script-padding 2)
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-attr-indent-offset t)
    (setq web-mode-sql-indent-offset 2)
    (setq web-mode-indent-style 2)
    (setq web-mode-enable-current-column-highlight t)
    (setq web-mode-enable-current-element-highlight t)
    ;; set up per-language ac-sources
    (define-key web-mode-map (kbd "C-n") 'web-mode-tag-match)

    ;;  (setq web-mode-ac-sources-alist
    ;;	'(("php" . (ac-source-php-extras ac-source-yasnippet ac-source-php-auto-yasnippets))
    ;;	  ("css" . (ac-source-css-property ac-source-emmet-css-snippets))))

    (add-hook 'web-mode-hook
              (lambda ()
                (yas-minor-mode t)
                (emmet-mode)
                ;; (flycheck-add-mode 'html-tidy 'web-mode)
                (flycheck-add-mode 'web-mode)
                (flycheck-mode)))

    (add-hook 'web-mode-before-auto-complete-hooks
              '(lambda ()
                 (let ((web-mode-cur-language (web-mode-language-at-pos)))
                   (if (string= web-mode-cur-language "php")
                       (yas-activate-extra-mode 'php-mode)
                     (yas-deactivate-extra-mode 'php-mode))
                   (if (string= web-mode-cur-language "css")
                       (setq emmet-use-css-transform t)
                     (setq emmet-use-css-transform nil)))))
    )
#+END_SRC

** js2-mode | [[https://github.com/mooz/js2-mode][github]]
Improved JavaScript editing mode for GNU Emacs

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :config
    (setq js2-strict-missing-semi-warning nil)
    (setq js2-missing-semi-one-line-override t)
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
    (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . js2-jsx-mode))
    (add-to-list 'interpreter-mode-alist '("node" . js2-jsx-mode)))
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (use-package yasnippet-snippets)
    (yas-reload-all) ;; ur custom snippets won't work untill u run this
    (add-hook 'prog-mode-hook #'yas-minor-mode))
#+END_SRC

** Flycheck | [[https://www.flycheck.org/en/latest/][guide]]
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init
    (global-flycheck-mode)
    (evil-leader/set-key "fb" 'flycheck-buffer)
    (evil-leader/set-key "fc" 'flycheck-clear)
    (evil-leader/set-key "fn" 'flycheck-next-error)
    (evil-leader/set-key "fp" 'flycheck-previous-error)
    (evil-leader/set-key "fs" 'flycheck-list-errors)
    )
#+END_SRC

** Emmet-mode | [[https://github.com/smihica/emmet-mode][github]]
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :hook (sgml-mode-hook css-mode-hook)
    :init
    (setq emmet-move-cursor-between-quotes t))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :init
    (evil-leader/set-key "gi" 'magit-init)
    (evil-leader/set-key "gs" 'magit-status))
#+END_SRC


* Set up -->
** G[g]tags | [[https://github.com/leoliu/ggtags][github]]
#+BEGIN_SRC emacs-lisp
  ;; == trying to make ggtags work ==
  ;; (use-package ggtags
  ;;   :hook (prog-mode . ggtags-mode))


  ;; (when (and (maybe-require-package 'gtags)
  ;;            (maybe-require-package 'bpr))
  ;;   ;; Bind some useful keys in the gtags select buffer that evil overrides.
  ;;   (add-hook 'gtags-select-mode-hook
  ;;             (lambda ()
  ;;               (evil-define-key 'normal gtags-select-mode-map (kbd "RET") 'gtags-select-tag)
  ;;               (evil-define-key 'normal gtags-select-mode-map (kbd "q") 'kill-buffer-and-window)))
  ;;
  ;; (provide 'init-gtags)

  ;; === or

  ;; (use-package gtags
  ;;   :init
  ;;   ;; Bind some useful keys in the gtags select buffer that evil overrides.
  ;;   (add-hook 'gtags-select-mode-hook
  ;;             (lambda ()
  ;;               (evil-define-key 'normal gtags-select-mode-map (kbd "RET") 'gtags-select-tag)
  ;;               (evil-define-key 'normal gtags-select-mode-map (kbd "q") 'kill-buffer-and-window))))

  ;; === functions:
  ;;
  ;; (defun gtags-reindex ()
  ;;   "Kick off gtags reindexing."
  ;;   (interactive)
  ;;   (let* ((root-path (expand-file-name (vc-git-root (buffer-file-name))))
  ;;          (gtags-filename (expand-file-name "GTAGS" root-path)))
  ;;     (if (file-exists-p gtags-filename)
  ;;         (gtags-index-update root-path)
  ;;       (gtags-index-initial root-path))))
  ;;
  ;; (defun gtags-index-initial (path)
  ;;   "Generate initial GTAGS files for PATH."
  ;;   (let ((bpr-process-directory path))
  ;;     (bpr-spawn "gtags")))
  ;;
  ;; (defun gtags-index-update (path)
  ;;   "Update GTAGS in PATH."
  ;;   (let ((bpr-process-directory path))
  ;;     (bpr-spawn "global -uv"))))
#+END_SRC

** Perspective | [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#perspective][source]]
My workflow consists of:
- C-x x P to investigate a new project with its new perspective (this
also saves off whatever I was doing)
- C-x x x switches to whatever I was doing before
- C-x x s switches to a project’s perspective based on its name

#+BEGIN_SRC emacs-lisp
  ;; (use-package perspective
  ;;   :ensure t
  ;;   :bind ("C-x x x" . persp-switch-last)
  ;;   :init (persp-mode +1)

  ;;   (use-package persp-projectile
  ;;     :ensure t
  ;;     :bind ("C-x x P" . projectile-persp-switch-project))

  ;;   :config
  ;;     (persp-turn-off-modestring))
#+END_SRC


* Eshell (still dunno which terminal to use)
#+BEGIN_SRC emacs-lisp
  ;; (require 'f)
  ;;
  ;; (setq eshell-visual-commands
  ;;       '("less" "tmux" "htop" "top" "bash" "zsh" "fish"))
  ;;
  ;; (setq eshell-visual-subcommands
  ;;       '(("git" "log" "l" "diff" "show")))
  ;;
  ;; ;; Prompt with a bit of help from http://www.emacswiki.org/emacs/EshellPrompt
  ;; (defmacro with-face (str &rest properties)
  ;;   `(propertize ,str 'face (list ,@properties)))
  ;;
  ;; (defun eshell/abbr-pwd ()
  ;;   (let ((home (getenv "HOME"))
  ;;         (path (eshell/pwd)))
  ;;     (cond
  ;;      ((string-equal home path) "~")
  ;;      ((f-ancestor-of? home path) (concat "~/" (f-relative path home)))
  ;;      (path))))
  ;;
  ;; (defun eshell/my-prompt ()
  ;;   (let ((header-bg "#161616"))
  ;;     (concat
  ;;      (with-face (eshell/abbr-pwd) :foreground "#008700")
  ;;      (if (= (user-uid) 0)
  ;; 	 (with-face "#" :foreground "red")
  ;;        (with-face "$" :foreground "#2345ba"))
  ;;      " ")))
  ;;
  ;; (setq eshell-prompt-function 'eshell/my-prompt)
  ;; (setq eshell-highlight-prompt nil)
  ;; (setq eshell-prompt-regexp "^[^#$\n]+[#$] ")
  ;;
  ;; (setq eshell-cmpl-cycle-completions nil)
  ;;
#+END_SRC


* User functions
** Writing custom function
#+BEGIN_SRC emacs-lisp
  ;; create a fnction that inserts a line 'above' cur. cursor position

  (defun sad/insert-line-before (times)
    ;; (interactive) separates f-s that are used by other f-s
    ;; and those that are called directly
    ;; 'p' means - take a 'parameter'
    (interactive "p")
    ;; store your current status, executes few things and goes back where it was before
    (save-excursion
      (move-beginning-of-line 1)
      (newline times)))

  ;; now after a f-n takes parameter 'times' to execute it 6 times: `C-6 {binded kbd}`

  (global-set-key (kbd "C-S-o") 'sad/insert-line-before)
#+END_SRC
** Config edit/reload
#+BEGIN_SRC emacs-lisp
  ;; edit
  (defun config-visit()
    (interactive)
    ;; (find-file "~/.emacs.d/config/config.org"))
    (find-file "~/.emacs.d/config/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)

  ;; reload
  (defun config-reload()
    (interactive)
    (org-babel-load-file (get-fullpath "config/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** Identation & buffer cleanups
#+BEGIN_SRC emacs-lisp
  ;; This re-indents, untabifies, and cleans up whitespace
  (defun indent-buffer ()
    (interactive)
    (indent-region (point-min) (point-max)))

  (defun cleanup-buffer ()
    "Delete trailing whitespace if the buffer is in `prog-' or `org-mode'."
    (if (or (derived-mode-p 'prog-mode)
	    (derived-mode-p 'org-mode))
	;; (indent-buffer)
	(delete-trailing-whitespace)))
  (add-to-list 'write-file-functions 'cleanup-buffer)

  "Remove tmux artifacts from region."
  (defun cleanup-region (beg end)
    (interactive "r")
    (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
      (replace-regexp re "" nil beg end)))
  (global-set-key (kbd "C-x M-t") 'cleanup-region)
#+END_SRC

** Window splitting
#+BEGIN_SRC emacs-lisp
  ;; evil-window-vsplit
  ;; (setq evil-window-split 'split-and-follow-hor)
  (defun evil-window-split()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun evil-window-vsplit()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+END_SRC

** Other f-s
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list))) ;; loop thrue list
  ;; set kbd if u will use it often
#+END_SRC
* Keybindings
** Packages
*** Helm
#+BEGIN_SRC emacs-lisp
  ;; (evil-leader/set-key "x" 'helm-M-x)
  ;; (global-set-key (kbd "M-x") 'helm-M-x)
  ;; (global-set-key (kbd "C-h o") 'helm-occur)
  ;; (evil-leader/set-key "hf" 'helm-find-files)
  ;; (evil-leader/set-key "hb" 'helm-buffers-list)
  ;; (evil-leader/set-key "hp" 'helm-browse-project)
#+END_SRC
