* Environment
** Major settings
#+BEGIN_SRC emacs-lisp
    ;; Splash Screen
    (setq inhibit-splash-screen t
	initial-scratch-message nil
	initial-major-mode 'org-mode)

    (setq x-select-enable-clipboard t)
    (desktop-save-mode 1) ;; automatically save/restore sessions

    (setq make-backup-files nil) ;; disable backup files
    ;; (setq auto-save-default nil) ;; disable auto-save files

    (defalias 'yes-or-no-p 'y-or-n-p) ;; Yes and No prompt

    ;; Misc
    (setq echo-keystrokes 0.1 ;; Turn down the time to echo keystrokes
	    use-dialog-box nil ;; use the echo area instead of dialog boxes
	    visible-bell t) ;; Use a visual indicator instead of making horrible noises

    ;; Vendor directory (for manually installed packages)
    (defvar sads/vendor-dir (expand-file-name "vendor" user-emacs-directory))
    (add-to-list 'load-path sads/vendor-dir)

    (dolist (project (directory-files sads/vendor-dir t "\\w+"))
    (when (file-directory-p project)
	(add-to-list 'load-path project)))
#+END_SRC
** Modes
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1) ;; to be able to move in came;; make electric-pair-mode work on more brackets

  (setq electric-pair-pairs
	'(
	  (?\' . ?\')))
  (electric-pair-mode 1) ;; insert pair of () "" [] {} ''

  (global-auto-revert-mode nil)
  (flyspell-mode nil)
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
  ;; (global-set-key (kbd "RET") 'newline-and-indent)
  (global-set-key (kbd "C-;") 'comment-or-uncomment-region)
  (global-set-key (kbd "C-<tab>") 'dabbrev-expand)
  (define-key minibuffer-local-map (kbd "C-<tab>") 'dabbrev-expand)
  ;; paste from clipboard by middle mouse button
  (global-set-key (kbd "<mouse-2>") 'clipboard-yank)
#+END_SRC

** Navigation
ido + smex | helm | swiper -- 3 different ways
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC
*** Buffers
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key "w" 'save-buffer)
  (evil-leader/set-key "bd" 'kill-buffer)
  (evil-leader/set-key "bm" 'ibuffer)
  (evil-leader/set-key "bo" 'switch-to-buffer)
  (global-set-key (kbd "C-c p") 'mode-line-other-buffer)
#+END_SRC

*** Window configurations
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key "cs" 'window-configuration-to-register)
  (evil-leader/set-key "cr" 'jump-to-register)
#+END_SRC

** Not used / unknown purpose
   #+BEGIN_SRC emacs-lisp
     ;; (setenv "PATH" (concat "/usr/local/bin:/opt/local/bin:/usr/bin:/bin" (getenv "PATH")))
     ;; (setq exec-path (append exec-path '("/usr/local/bin")))
     (require 'cl)

     ;; Terminal setup (stop prompt appearing each time when starting 'ansi-term')
     ;; (defvar my-term-shell "/bin/bash")
     ;; (defadvice ansi-term (before force-bash)
     ;;   (interactive (list my-term-shell)))
     ;; (ad-activate 'ansi-term)


     ;; (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
     ;; (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

     ;; shell-script-mode
     (add-to-list 'auto-mode-alist '("\\.zsh$" . shell-script-mode))

     ;; conf-mode
     (add-to-list 'auto-mode-alist '("\\.gitconfig$" . conf-mode))
   #+END_SRC


* Appearance
** Packages
*** Spacemacs-theme
#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-common
      :ensure spacemacs-theme
      :config (load-theme 'spacemacs-dark t))
#+END_SRC

*** Rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :defer t
    :init (rainbow-mode 1))

  (use-package rainbow-delimiters
    :init
    (rainbow-delimiters-mode 1))
#+END_SRC
** Other visual settings
#+BEGIN_SRC emacs-lisp
  ;; Change cursor color depending on mode (only GUI emacs)
  (setq evil-emacs-state-cursor '("cyan" box))
  (setq evil-normal-state-cursor '("cyan" box))
  (setq evil-visual-state-cursor '("orange" box))
  (setq evil-insert-state-cursor '("green" bar))
  (setq evil-replace-state-cursor '("red" bar))
  (setq evil-operator-state-cursor '("cyan" hollow))

  ;; marking text
  (delete-selection-mode t)
  (transient-mark-mode t)

  ;; font perks
  (global-prettify-symbols-mode t) ;; type 'lambda' to understand

  ;; Scroll-, tool-, menu bars*
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (if window-system (toggle-scroll-bar -1))

  ;; show line numbers
  (when (version<= "26.0.50" emacs-version )
  (global-display-line-numbers-mode))

  ;; Display Settings
  (setq-default indicate-empty-lines t)
  (when (not indicate-empty-lines)
  (toggle-indicate-empty-lines))

  (setq-default show-trailing-whitespace t)

  (show-paren-mode t) ;; highlight parentheses
#+END_SRC
** Not used / known
   #+BEGIN_SRC emacs-lisp
     ;; Indentation
     ;; (setq tab-width 2
     ;;       indent-tabs-mode nil)

     ;; when in GUI - highlight the line with the cursor
     ;; didn't enable cuz of the comment line highlighting in emacs theme
     ;; (when window-system (global-hl-line-mode t))

     ;; highlight the line with the cursor
     ;; (when window-system (global-hl-line-mode t))

     ;; Color Codes
     (require 'ansi-color)
     (defun colorize-compilation-buffer ()
       (toggle-read-only)
       (ansi-color-apply-on-region (point-min) (point-max))
       (toggle-read-only))
     (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
   #+END_SRC


* Default packages
#+BEGIN_SRC emacs-lisp
  (setq dired-dwim-target t)
#+END_SRC

* Packages update
*slows down the startup A LOT*
#+BEGIN_SRC emacs-lisp
  ;; (use-package auto-package-update
  ;;   :config
  ;;   (setq auto-package-update-delete-old-versions t)
  ;;   (setq auto-package-update-hide-results t)
  ;;   (auto-package-update-maybe))
#+END_SRC
* ORG
  *do that with 'use-package'
** main settings
#+BEGIN_SRC emacs-lisp
  (use-package org

    :init
    ;; kbd
    (evil-leader/set-key "oc" 'org-capture)
    (evil-leader/set-key "oa" 'org-agenda)
    ;; enable flyspell-mode and writegood-mode
    ;; (add-hook 'org-mode-hook (lambda () (flyspell-mode)))
    (add-hook 'org-mode-hook (lambda () (writegood-mode)))
    (add-hook 'org-mode-hook (lambda () (abbrev-mode 1)))

    :config
    ;; set maximum indentation for description lists
    (setq org-list-description-max-indent 5)
    ;; prevent demoting heading also shifting text inside sections
    (setq org-adapt-indentation nil)
    ;; open code edit buffers in the same window
    (setq org-src-window-setup 'current-window)
    ;; enable logging when tasks are complete
    (setq org-log-done t
	  org-todo-keywords '((sequence "TODO" "INPROGRESS" "DONE"))
	  org-todo-keyword-faces '(("INPROGRESS" . (:foreground "blue" :weight bold))))

    ;; handling errors
    :catch (lambda (keyword err)
	     (message (error-message-string err))))

  ;; there is also *org-agenda* and *org-habit* setup in this tut, but i skipped it for now
#+END_SRC
** visual settings
#+BEGIN_SRC emacs-lisp
  ;; bullets instead of asteric
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))

  (setq org-src-fontify-natively t) ;;syntax highlight code blocks
#+END_SRC
** org-babel
#+BEGIN_SRC emacs-lisp
  ;; (require 'ob) ;; don't know what for is this line

  ;; embedd languages inside .org files with proper font-locking
  ;; Allows to extract and execute code.
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (js . t)
     (C . t)))

  ;; (setq org-confirm-babel-evaluate nil)
  ;;
  ;; (add-hook 'org-babel-after-execute-hook (lambda ()
  ;;                                           (condition-case nil
  ;;                                               (org-display-inline-images)
  ;;                                             (error nil)))
  ;;           'append)

#+END_SRC

** agenda/todo setup
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (quote ("~/Desktop/todo.org"))) ;; dunno if it's gonna work

  ;; keybindings
  (evil-leader/set-key "oc" 'org-capture)
  (evil-leader/set-key "oa" 'org-agenda)

  ;;set priority range from A to C with default A
  (setq org-highest-priority ?A)
  (setq org-lowest-priority ?C)
  (setq org-default-priority ?A)

  ;;set colours for priorities
  (setq org-priority-faces '((?A . (:foreground "#F0DFAF" :weight bold))
			     (?B . (:foreground "LightSteelBlue"))
			     (?C . (:foreground "OliveDrab"))))

  ;;open agenda in current window
  (setq org-agenda-window-setup (quote current-window))

  (setq org-capture-templates
	'(("t" "todo" entry (file+headline "~/Desktop/todo.org" "Tasks")
	   "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n")))

  ;; org-mode agenda options

  (setq org-deadline-warning-days 7) ;; warn of any deadlines in next 7 days
  (setq org-agenda-span (quote fortnight)) ;;show tasks scheduled in next fortnight
  (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
  (setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
  ;;don't show tasks that are scheduled or have deadlines in the normal todo list
  (setq org-agenda-todo-ignore-deadlines (quote all))
  (setq org-agenda-todo-ignore-scheduled (quote all))

  ;;sort tasks in order of when they are due and then by priority
  (setq org-agenda-sorting-strategy
    (quote
     ((agenda deadline-up priority-down)
      (todo priority-down category-keep)
      (tags priority-down category-keep)
      (search category-keep))))
#+END_SRC

** snippets
now after typing '<el TAB' u will get code block with 'emacs-lisp' src
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :init
    (evil-leader/set-key "gi" 'magit-init)
    (evil-leader/set-key "gs" 'magit-status))
#+END_SRC
* Evil
** evil itself
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init (evil-mode t)
    :bind ("M-c" . evil-normal-state)
    :config
    ;; brings cursor at the middle of the screen after pressing 'n' in evil-mode
    (defadvice evil-ex-search-next (after advice-for-evil-ex-search-next activate)
      (evil-scroll-line-to-center (line-number-at-pos))))
#+END_SRC
** evil-leader
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :init
    (setq evil-leader/in-all-states 1)
    (global-evil-leader-mode)
    (evil-leader/set-leader ","))
#+END_SRC

* IDO
  is it possible to make ido search for regexp?
** IDO enable
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (setq ido-use-filename-at-point 'guess) ;; enable Fine File At Point
  (setq ido-use-url-at-point nil) ;; disable URL ffap
  (setq ido-file-extensions-order '(".org" ".js" ".html" ".emacs" ".el" ".ini" ".cfg" ".cnf"))
  (ido-mode 1)
#+END_SRC
** IDO-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :init
    (ido-vertical-mode 1))
    (setq ido-vertical-define-keys 'C-n-and-C-p-only) ;; move between options
#+END_SRC
** Smex
*Package to get completion in ~M-x~ menu (and most used commands will be at top)*
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :init (smex-initialize)

    :bind
    ("M-x" . smex)
    ("M-X" . smex-major-mode-commands))

  ;; don't know for what is setting below
  ;; (setq smex-save-file (expand-file-name ".smex-items" user-emacs-directory))
#+END_SRC

* Evil Multiple-Cursors | [[https://github.com/gabesoft/evil-mc][github]]
#+BEGIN_SRC emacs-lisp
  (use-package evil-mc
    :init
    (global-evil-mc-mode 1)
    (evil-define-key 'visual evil-mc-key-map
      "A" #'evil-mc-make-cursor-in-visual-selection-end
      "I" #'evil-mc-make-cursor-in-visual-selection-beg))

  (evil-leader/set-key "ma" 'evil-mc-make-all-cursors)
  (evil-leader/set-key "mz" 'evil-mc-undo-all-cursors)
  (evil-leader/set-key "mn" 'evil-mc-make-and-goto-next-match)
  (evil-leader/set-key "mp" 'evil-mc-make-and-goto-prev-match)
  (evil-leader/set-key "mf" 'evil-mc-skip-and-goto-next-match)
  (evil-leader/set-key "mb" 'evil-mc-skip-and-goto-prev-match)
  (evil-leader/set-key "mu" 'evil-mc-undo-last-added-cursor)
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
    (projectile-mode +1)
    (evil-leader/set-key "pf" 'projectile-find-file))
#+END_SRC

* Markdown-mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode))
    :init
    ;; generate HTML previews from within the mode
    (setq markdown-command "pandoc --smart -f markdown -t html")
    ;; use a custom css file to make it a little prettier
    (setq markdown-css-paths `(,(expand-file-name "markdown.css" sads/vendor-dir)))
    (setq markdown-command "multimarkdown"))

  ;; prev. settings
  ;; (add-hook 'markdown-mode-hook
  ;; 	  (lambda ()
  ;; 	    (visual-line-mode t)
  ;; 	    (writegood-mode t)
  ;; 	    (flyspell-mode t)))
#+END_SRC
* Spaceline / Powerline
#+BEGIN_SRC emacs-lisp
  ;; (use-package powerline
  ;;   :init (powerline-default-theme))

  (use-package spaceline
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC

** Diminish
hide some major modes in spaceline
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :init
    (diminish 'projectile-mode)
    (diminish 'subword-mode)
    (diminish 'rainbow-mode)
    (diminish 'evil-mc-mode)
    (diminish 'undo-tree-mode))
#+END_SRC

* Auto-complete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :init
    (ac-config-default)
    (setq ac-use-menu-map t)
    (setq ac-use-quick-help nil)
    (define-key ac-menu-map "\C-n" 'ac-next)
    (define-key ac-menu-map "\C-p" 'ac-previous))
#+END_SRC

* Switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2) ;; after how many windows will this pop up
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ;; remap default funciton with 'switch-window'
    ([remap other-window] . switch-window))
#+END_SRC

* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "Yo, me"))
#+END_SRC
* Dmenu
~<leader> t~ - runs small terminal for launching applications (run and type 'discord')
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :init
    (evil-leader/set-key "t" 'dmenu))
#+END_SRC
* Popup-kill-ring
~M-y~ - get popup with things u previously deleted..
~C-n/p~ - cycle through them
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
* Sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :bind ("s-f" . sudo-edit))
#+END_SRC


* Eshell (still dunno which terminal to use)
#+BEGIN_SRC emacs-lisp
  ;; (require 'f)
  ;;
  ;; (setq eshell-visual-commands
  ;;       '("less" "tmux" "htop" "top" "bash" "zsh" "fish"))
  ;;
  ;; (setq eshell-visual-subcommands
  ;;       '(("git" "log" "l" "diff" "show")))
  ;;
  ;; ;; Prompt with a bit of help from http://www.emacswiki.org/emacs/EshellPrompt
  ;; (defmacro with-face (str &rest properties)
  ;;   `(propertize ,str 'face (list ,@properties)))
  ;;
  ;; (defun eshell/abbr-pwd ()
  ;;   (let ((home (getenv "HOME"))
  ;;         (path (eshell/pwd)))
  ;;     (cond
  ;;      ((string-equal home path) "~")
  ;;      ((f-ancestor-of? home path) (concat "~/" (f-relative path home)))
  ;;      (path))))
  ;;
  ;; (defun eshell/my-prompt ()
  ;;   (let ((header-bg "#161616"))
  ;;     (concat
  ;;      (with-face (eshell/abbr-pwd) :foreground "#008700")
  ;;      (if (= (user-uid) 0)
  ;; 	 (with-face "#" :foreground "red")
  ;;        (with-face "$" :foreground "#2345ba"))
  ;;      " ")))
  ;;
  ;; (setq eshell-prompt-function 'eshell/my-prompt)
  ;; (setq eshell-highlight-prompt nil)
  ;; (setq eshell-prompt-regexp "^[^#$\n]+[#$] ")
  ;;
  ;; (setq eshell-cmpl-cycle-completions nil)
  ;;
#+END_SRC

* Web-mode (haven't set up yet)
#+BEGIN_SRC emacs-lisp
  ;; (setq web-mode-style-padding 2)
  ;; (setq web-mode-script-padding 2)
  ;; (setq web-mode-markup-indent-offset 2)
  ;; (setq web-mode-css-indent-offset 2)
  ;; (setq web-mode-code-indent-offset 2)
  ;;
  ;; (add-to-list 'auto-mode-alist '("\\.hbs$" . web-mode))
  ;; (add-to-list 'auto-mode-alist '("\\.erb$" . web-mode))
  ;; (add-to-list 'auto-mode-alist '("\\.html$" . web-mode))
#+END_SRC


* User functions
** Writing custom function
#+BEGIN_SRC emacs-lisp
  ;; create a fnction that inserts a line 'above' cur. cursor position

  (defun sad/insert-line-before (times)
    ;; (interactive) separates f-s that are used by other f-s
    ;; and those that are called directly
    ;; 'p' means - take a 'parameter'
    (interactive "p")
    ;; store your current status, executes few things and goes back where it was before
    (save-excursion
      (move-beginning-of-line 1)
      (newline times)))

  ;; now after a f-n takes parameter 'times' to execute it 6 times: `C-6 {binded kbd}`

  (global-set-key (kbd "C-S-o") 'sad/insert-line-before)
#+END_SRC
** Config edit/reload
#+BEGIN_SRC emacs-lisp
  ;; edit
  (defun config-visit()
    (interactive)
    (find-file "~/git/emacs_init/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)

  ;; reload
  (defun config-reload()
    (interactive)
    (org-babel-load-file (get-fullpath "config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** Identation & buffer cleanups
#+BEGIN_SRC emacs-lisp
  ;; This re-indents, untabifies, and cleans up whitespace
  (defun untabify-buffer ()
    (interactive)
    (untabify (point-min) (point-max)))

  (defun indent-buffer ()
    (interactive)
    (indent-region (point-min) (point-max)))

  "Perform a bunch of operations on the whitespace content of a buffer."
  (defun cleanup-buffer ()
    (interactive)
    (indent-buffer)
    (untabify-buffer)
    (delete-trailing-whitespace))
  ;; (global-set-key (kbd "C-c n") 'cleanup-buffer)

  "Remove tmux artifacts from region."
  (defun cleanup-region (beg end)
    (interactive "r")
    (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
      (replace-regexp re "" nil beg end)))
  (global-set-key (kbd "C-x M-t") 'cleanup-region)
#+END_SRC

** Window splitting
#+BEGIN_SRC emacs-lisp
  ;; evil-window-vsplit
  ;; (setq evil-window-split 'split-and-follow-hor)
  (defun evil-window-split()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun evil-window-vsplit()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+END_SRC

** Other f-s
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list))) ;; loop thrue list
  ;; set kbd if u will use it often
#+END_SRC
* Keybindings
** Packages
*** Helm
#+BEGIN_SRC emacs-lisp
  ;; (evil-leader/set-key "x" 'helm-M-x)
  ;; (global-set-key (kbd "M-x") 'helm-M-x)
  ;; (global-set-key (kbd "C-h o") 'helm-occur)
  ;; (evil-leader/set-key "hf" 'helm-find-files)
  ;; (evil-leader/set-key "hb" 'helm-buffers-list)
  ;; (evil-leader/set-key "hp" 'helm-browse-project)
#+END_SRC
