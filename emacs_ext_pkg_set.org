* Other package
* ORG
  *do that with 'use-package'
** main settings
#+BEGIN_SRC emacs-lisp
  ;; set maximum indentation for description lists
  (setq org-list-description-max-indent 5)

  ;; prevent demoting heading also shifting text inside sections
  (setq org-adapt-indentation nil)

  ;; enable logging when tasks are complete
  ;; enable flyspell-mode and writegood-mode when org-mode is active
  (setq org-log-done t
	org-todo-keywords '((sequence "TODO" "INPROGRESS" "DONE"))
	org-todo-keyword-faces '(("INPROGRESS" . (:foreground "blue" :weight bold))))
  (add-hook 'org-mode-hook (lambda () (flyspell-mode)))
  (add-hook 'org-mode-hook (lambda () (writegood-mode)))

  ;; there is also *org-agenda* and *org-habit* setup in this tut, but i skipped it for now

  (add-hook 'org-mode-hook (lambda () (abbrev-mode 1))) ;; org-abbrev
#+END_SRC
** visual settings
#+BEGIN_SRC emacs-lisp
  ;; bullets instead of asteric
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))

  (setq org-src-fontify-natively t) ;;syntax highlight code blocks
#+END_SRC
** org-babel
#+BEGIN_SRC emacs-lisp
  ;; (require 'ob) ;; don't know what for is this line

  ;; embedd languages inside .org files with proper font-locking
  ;; Allows to extract and execute code.
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (js . t)
     (C . t)))

  ;; (setq org-confirm-babel-evaluate nil)
  ;;
  ;; (add-hook 'org-babel-after-execute-hook (lambda ()
  ;;                                           (condition-case nil
  ;;                                               (org-display-inline-images)
  ;;                                             (error nil)))
  ;;           'append)

#+END_SRC

** agenda/todo setup
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (quote ("~/Desktop/todo.org"))) ;; dunno if it's gonna work

  ;;set priority range from A to C with default A
  (setq org-highest-priority ?A)
  (setq org-lowest-priority ?C)
  (setq org-default-priority ?A)

  ;;set colours for priorities
  (setq org-priority-faces '((?A . (:foreground "#F0DFAF" :weight bold))
			     (?B . (:foreground "LightSteelBlue"))
			     (?C . (:foreground "OliveDrab"))))

  ;;open agenda in current window
  (setq org-agenda-window-setup (quote current-window))

  (setq org-capture-templates
	'(("t" "todo" entry (file+headline "~/Desktop/todo.org" "Tasks")
	   "* TODO [#A] %?")))
#+END_SRC
* Evil
** evil itself
#+BEGIN_SRC emacs-lisp
  (require 'evil)
  (evil-mode t)

  ;; brings cursor at the middle of the screen after pressing 'n' in evil-mode
  (defadvice evil-ex-search-next (after advice-for-evil-ex-search-next activate)
    (evil-scroll-line-to-center (line-number-at-pos)))
#+END_SRC
** evil-leader
#+BEGIN_SRC emacs-lisp
  (setq evil-leader/in-all-states 1)
  (global-evil-leader-mode)
  (evil-leader/set-leader ",")
#+END_SRC

* IDO
  is it possible to make ido search for regexp?
** IDO enable
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** IDO-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  ;; (setq ido-vertical-define-keys 'C-n-and-C-p-only) ;; move between options
#+END_SRC
